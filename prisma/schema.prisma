generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")

  accounts Account[]
  sessions Session[]
  ratings  Rating[]

  @@map("users")
}

model Book {
  id         String   @id @default(uuid())
  name       String
  author     String
  summary    String
  coverUrl   String   @map("cover_url")
  totalPages Int      @map("total_pages")
  createdAt  DateTime @default(now()) @map("created_at")

  categories CategoriesOnBooks[]
  ratings    Rating[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  bookId     String @map("book_id")
  categoryId String @map("category_id")

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("ratings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
